{"tests":"#lang racket\n\n(require quickcheck\n         rackunit\n         rackunit/quickcheck)\n\n(require (prefix-in solutions. \"k-ary-solutions.rkt\"))\n\n\n(define from-to-id\n  (property ((n (choose-integer 1 2147483561))\n             (k (choose-integer 2 9)))\n    (= n (solutions.from-k-ary (solutions.to-k-ary n k) k))))\n\n(define (list-to-num xs)\n  (foldl (lambda (x acc)\n           (+ (* 10 acc) x))\n         0\n         xs))\n\n(define to-from-id\n  (property ((k (choose-integer 2 9)))\n    (property ((ns (sized\n                     (lambda (n) (choose-list (choose-integer 0 (- k 1)) n)))))\n      (let ((m (list-to-num ns)))\n        (= m (solutions.to-k-ary (solutions.from-k-ary m k) k))))))\n\n(test-case\n  \"PROPERTY: Converting to k-ary and then from k-ary is the identity\"\n  (check-property from-to-id))\n\n(test-case\n  \"PROPERTY: Converting from k-ary and then to k-ary is the identity\"\n  (check-property to-from-id))\n\n(test-case\n  \"UNIT TESTS: to-k-ary\"\n  (test-begin\n    (check-equal? (solutions.to-k-ary 2 5) 2)\n    (check-equal? (solutions.to-k-ary 6 7) 6)\n    (check-equal? (solutions.to-k-ary 0 9) 0)\n    (check-equal? (solutions.to-k-ary 1234567123 6) 322301020311)\n    (check-equal? (solutions.to-k-ary 83742878901 5) 2333001134111101)\n    (check-equal? (solutions.to-k-ary 1438091 3) 2201001200122)))\n\n(test-case\n  \"UNIT TESTS: from-k-ary\"\n  (test-begin\n    (check-equal? (solutions.from-k-ary 0 7) 0)\n    (check-equal? (solutions.from-k-ary 8 9) 8)\n    (check-equal? (solutions.from-k-ary 2 3) 2)\n    (check-equal? (solutions.from-k-ary 12312312301 6) 86058829)\n    (check-equal? (solutions.from-k-ary 14321415 7) 1349913)\n    (check-equal? (solutions.from-k-ary 143213001 5) 757251)))\n","name":"k-ary","expectedFilename":"k-ary-solutions.rkt","language":"Racket","description":"Convert between numeral systems"}